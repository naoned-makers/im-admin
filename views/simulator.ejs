<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>im-simulator</title>
    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <script src="mqtt.min.js"></script>
    <script type="text/javascript">
        <% if (locals['imbroker']) {%>
            let mqttServer = 'ws://<%= locals['imbroker'].address %>:<%= locals['imbroker'].txtRecord.wsport %>';
            var urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('mqttServer')){
                mqttServer = decodeURIComponent(urlParams.get('mqttServer'));
            }
            let client = mqtt.connect(mqttServer, { clientId: 'hatsimulator_' + Math.random().toString(16).substr(2, 8) });
        <% }else {%>
            let client = { on: function () { } };
        <%} %>
            //Emitted on successful (re)connection 
            client.on('connect', function () {
                console.log('connect');
                client.subscribe('im/event/rpiheart/pwmhat/+');
                document.getElementById("mqtton").style.color = "green";
            })

        //Emitted when the client goes offline.
        client.on('offline', function () {
            console.log('offline');
            document.getElementById("mqtton").style.color = "black";
        })
        //Emitted after a disconnection.
        client.on('close', function () {
            console.log('close');
            document.getElementById("mqtton").style.color = "red";
        })
        //Emitted when a reconnect starts.
        client.on('reconnect', function () {
            console.log('reconnect');
            document.getElementById("mqtton").style.color = "orange";
        })
        //Emitted when the client cannot connect (i.e. connack rc != 0) or when a parsing error occurs.
        client.on('error', function () {
            console.log('error');
            document.getElementById("mqtton").style.color = "gray";
        })

        //A new command as arrived
        client.on('message', function (topic, strPlayload) {
            let pwmChannel = topic.split("/")[4];
            let evtPlayload = JSON.parse(strPlayload);
            //call the matching entity domain
            console.log(pwmChannel + "  " + evtPlayload.pulse);
            if (pwmChannel != 'reset') {
                document.getElementById(pwmChannel).value = +evtPlayload.pulse;
                document.getElementById(pwmChannel).className = 'newmessage';
                window.setTimeout(function () {
                    document.getElementById(pwmChannel).className = '';
                }, 30);
            } else {
                for (var index = 0; index < 12; index++) {
                    if (document.getElementById(index)) {
                        document.getElementById(index).value = document.getElementById(index).defaultValue;
                    }
                }

            }
        })
    </script>
    <script type="text/javascript">
        <% if (locals['imbroker']) {%>
            let mqttServer = 'ws://<%= locals['imbroker'].address %>:<%= locals['imbroker'].txtRecord.wsport %>';
            var urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('mqttServer')){
                mqttServer = decodeURIComponent(urlParams.get('mqttServer'));
            }
            let clientpixel = mqtt.connect(mqttServer, { clientId: 'pixelsimulator_' + Math.random().toString(16).substr(2, 8) });
        <% }else {%>
            let clientpixel = { on: function () { } };
        <%} %>
        //Emitted on successful (re)connection 
        clientpixel.on('connect', function () {
            clientpixel.subscribe('im/event/esp8266/neopixel/#');
        })
        //A new command as arrived
        clientpixel.on('message', function (topic, strPlayload) {
            let pinNumber = topic.split("/")[4];
            let evtPlayload = JSON.parse(strPlayload);
            let elTarget = "neopixel"+pinNumber;
            neoring(elTarget ,evtPlayload.pattern, evtPlayload.interval, evtPlayload.color1,evtPlayload.color2)
        })

        function neoring(elTarget,pattern, interval, rgbColor,rgbColor2) {
            //console.log(elTarget,pattern,interval,"#"+(""+rgbColor.toString(16)).padStart(6,"0"))
            let color1 = "#"+(""+rgbColor.toString(16)).padStart(6,"0");
            let color2 = "#"+(""+rgbColor2.toString(16)).padStart(6,"0");
            console.log("linear-gradient(90deg, "+color1+" 50%, "+color2+" 50%)");
            document.getElementById(elTarget).style.background = "linear-gradient(90deg, "+color1+" 50%, "+color2+" 50%)";
            //document.getElementById(elTarget).style.animationDuration = interval*16 + 'ms';
            //document.getElementById(elTarget).style.animationIterationCount = 'infinite';
        }
    </script>
    <style>
        body {
            background-color: #202020;
            /*width: 100%;
	        height: 100%;*/
            overflow: hidden;
        }
        input[type=range][orient=vertical] {
            writing-mode: bt-lr;
            /* IE */
            -webkit-appearance: slider-vertical;
            /* WebKit */
            width: 8px;
            height: 175px;
            padding: 0 5px;
        }

        body {
            color: white;
        }

        .newmessage {
            -webkit-appearance: none !important;
            visibility: hidden;
            /*background:red;*/
        }

        #neoring {
            text-align: center;
            vertical-align: middle;
            position: relative;
        }

        .led {
            /* position:absolute;*/
        }
    </style>
</head>

<body>
    <div id="mqtton">MQTT Brocker ws://<%= locals['imbroker'].address %>:<%= locals['imbroker'].txtRecord.wsport %></div>
    <hr/> helmet
    <input id="7" name="helmet" type="range" min="170" max="325" />
    <hr/> eyes RGB
    <div id="neopixelA" class="led">&#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC;</div>
    <br/> head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <input id="2" name="head" type="range" min="165" max="450" />
    <hr/> energy ring RGB
    <div id="neopixelB" class="led">&#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC; &#x25FC;</div>
    <br/> <br/> rightarm
    <input id="1" name="rightarm" type="range" orient="vertical" min="290" max="480" value="480" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftarm
    <input id="0" name="leftarm" type="range" orient="vertical" min="170" max="350" value="170" />
    <br/>
    <br/>
    <input id="4" name="righthand" type="range" min="240" max="440" value="360" />
    <input id="5" name="lefthand" type="range" min="160" max="350" value="240" />
    <br/> righthand&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lefthand

</body>

</html>